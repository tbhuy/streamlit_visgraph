{"version":3,"sources":["StreamlitVisGraph.tsx","index.tsx"],"names":["StreamlitVisGraph","render","graph","JSON","parse","props","args","nodes","slice","i","length","title","htmlTitle","options","events","doubleClick","event","console","log","link","url","window","open","getNetwork","network","html","container","document","createElement","innerHTML","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","getElementById"],"mappings":"mQAcMA,E,4MAGGC,OAAS,WAMd,IAHA,IAAIC,EAAQC,KAAKC,MAAM,EAAKC,MAAMC,KAAX,OAEnBC,EAAQL,EAAMK,MAAMC,QACfC,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,IAC7BF,EAAME,GAAGE,QACVJ,EAAME,GAAGE,MAAQ,EAAKC,UAAUL,EAAME,GAAGE,QAI7C,IAAME,EAAUV,KAAKC,MAAM,EAAKC,MAAMC,KAAX,SAKrBQ,EAAS,CACbC,YAAa,SAACC,GACZC,QAAQC,IAAIF,EAAMT,OAClB,IAAIY,EAAOjB,EAAMK,MAAMS,EAAMT,MAAM,IAAIa,IACpCD,GACDE,OAAOC,KAAKH,KAUlB,OACE,8BAEA,kBAAC,IAAD,CACAjB,MAAOA,EACPW,QAASA,EACTC,OAAQA,EACRS,WAAY,SAACC,S,EAUTZ,UAAY,SAACa,GACnB,IAAMC,EAAYC,SAASC,cAAc,OAEzC,OADAF,EAAUG,UAAYJ,EACfC,G,yBAvDqBI,0BAiEjBC,oCAAwB/B,GCzEvCgC,IAAS/B,OACP,kBAAC,IAAMgC,WAAP,KACE,kBAAC,oBAAD,KACE,kBAAC,EAAD,QAGJN,SAASO,eAAe,W","file":"static/js/main.4800f0db.chunk.js","sourcesContent":["\nimport {\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\nimport VisGraph from 'react-vis-graph-wrapper';\n\n\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass StreamlitVisGraph extends StreamlitComponentBase {\n\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    var graph = JSON.parse(this.props.args[\"graph\"]);\n    \n    var nodes = graph.nodes.slice();;\n    for (let i = 0; i < nodes.length; i++) {\n      if(nodes[i].title)\n        nodes[i].title = this.htmlTitle(nodes[i].title);\n      \n    }\n  \n    const options = JSON.parse(this.props.args[\"options\"]);\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n\n    const events = {\n      doubleClick: (event:any) => {\n        console.log(event.nodes);\n        let link = graph.nodes[event.nodes[0]].url;\n        if(link)\n          window.open(link);\n      }\n\n     \n    };\n\n    // Show a button and some text.\n    // When the button is clicked, we'll increment our \"numClicks\" state\n    // variable, and send its new value back to Streamlit, where it'll\n    // be available to the Python program.\n    return (\n      <span>\n    \n      <VisGraph\n      graph={graph}\n      options={options}\n      events={events}\n      getNetwork={(network: any) => {\n        //  if you want access to vis.js network api you can set the state in a parent component using this property\n        \n        //console.log(network);\n      }}/>\n       \n      </span>\n    )\n  }\n\n  private htmlTitle = (html):any => {   \n    const container = document.createElement(\"div\");\n    container.innerHTML = html;\n    return container;\n  }\n}\n\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(StreamlitVisGraph)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { StreamlitProvider } from \"streamlit-component-lib-react-hooks\"\nimport StreamlitVisGraph from \"./StreamlitVisGraph\"\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <StreamlitProvider>\n      <StreamlitVisGraph/>\n    </StreamlitProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}